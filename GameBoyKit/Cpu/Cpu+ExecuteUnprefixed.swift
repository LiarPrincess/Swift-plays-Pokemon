// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// This file was auto-generated.
// DO NOT EDIT!

// swiftlint:disable file_length
// swiftlint:disable function_body_length
// swiftlint:disable cyclomatic_complexity

extension Cpu {

  /// Executes the instruction, returns the number of cycles it took.
  internal func executeUnprefixed(_ opcode: UInt8) -> UInt8 {
    switch opcode {
    case 0x0: return self.nop()
    case 0x1: return self.ld_rr_d16(.bc, self.next16)
    case 0x2: return self.ld_pBC_a()
    case 0x3: return self.inc_rr(.bc)
    case 0x4: return self.inc_r(.b)
    case 0x5: return self.dec_r(.b)
    case 0x6: return self.ld_r_d8(.b, self.next8)
    case 0x7: return self.rlca()
    case 0x8: return self.ld_pA16_sp(self.next16)
    case 0x9: return self.add_hl_r(.bc)
    case 0xa: return self.ld_a_pBC()
    case 0xb: return self.dec_rr(.bc)
    case 0xc: return self.inc_r(.c)
    case 0xd: return self.dec_r(.c)
    case 0xe: return self.ld_r_d8(.c, self.next8)
    case 0xf: return self.rrca()
    case 0x10: return self.stop()
    case 0x11: return self.ld_rr_d16(.de, self.next16)
    case 0x12: return self.ld_pDE_a()
    case 0x13: return self.inc_rr(.de)
    case 0x14: return self.inc_r(.d)
    case 0x15: return self.dec_r(.d)
    case 0x16: return self.ld_r_d8(.d, self.next8)
    case 0x17: return self.rla()
    case 0x18: return self.jr_e(self.next8)
    case 0x19: return self.add_hl_r(.de)
    case 0x1a: return self.ld_a_pDE()
    case 0x1b: return self.dec_rr(.de)
    case 0x1c: return self.inc_r(.e)
    case 0x1d: return self.dec_r(.e)
    case 0x1e: return self.ld_r_d8(.e, self.next8)
    case 0x1f: return self.rra()
    case 0x20: return self.jr_cc_e(.nz, self.next8)
    case 0x21: return self.ld_rr_d16(.hl, self.next16)
    case 0x22: return self.ld_pHLI_a()
    case 0x23: return self.inc_rr(.hl)
    case 0x24: return self.inc_r(.h)
    case 0x25: return self.dec_r(.h)
    case 0x26: return self.ld_r_d8(.h, self.next8)
    case 0x27: return self.daa()
    case 0x28: return self.jr_cc_e(.z, self.next8)
    case 0x29: return self.add_hl_r(.hl)
    case 0x2a: return self.ld_a_pHLI()
    case 0x2b: return self.dec_rr(.hl)
    case 0x2c: return self.inc_r(.l)
    case 0x2d: return self.dec_r(.l)
    case 0x2e: return self.ld_r_d8(.l, self.next8)
    case 0x2f: return self.cpl()
    case 0x30: return self.jr_cc_e(.nc, self.next8)
    case 0x31: return self.ld_sp_d16(self.next16)
    case 0x32: return self.ld_pHLD_a()
    case 0x33: return self.inc_sp()
    case 0x34: return self.inc_pHL()
    case 0x35: return self.dec_pHL()
    case 0x36: return self.ld_pHL_d8(self.next8)
    case 0x37: return self.scf()
    case 0x38: return self.jr_cc_e(.c, self.next8)
    case 0x39: return self.add_hl_sp()
    case 0x3a: return self.ld_a_pHLD()
    case 0x3b: return self.dec_sp()
    case 0x3c: return self.inc_r(.a)
    case 0x3d: return self.dec_r(.a)
    case 0x3e: return self.ld_r_d8(.a, self.next8)
    case 0x3f: return self.ccf()
    case 0x40: return self.ld_r_r(.b, .b)
    case 0x41: return self.ld_r_r(.b, .c)
    case 0x42: return self.ld_r_r(.b, .d)
    case 0x43: return self.ld_r_r(.b, .e)
    case 0x44: return self.ld_r_r(.b, .h)
    case 0x45: return self.ld_r_r(.b, .l)
    case 0x46: return self.ld_r_pHL(.b)
    case 0x47: return self.ld_r_r(.b, .a)
    case 0x48: return self.ld_r_r(.c, .b)
    case 0x49: return self.ld_r_r(.c, .c)
    case 0x4a: return self.ld_r_r(.c, .d)
    case 0x4b: return self.ld_r_r(.c, .e)
    case 0x4c: return self.ld_r_r(.c, .h)
    case 0x4d: return self.ld_r_r(.c, .l)
    case 0x4e: return self.ld_r_pHL(.c)
    case 0x4f: return self.ld_r_r(.c, .a)
    case 0x50: return self.ld_r_r(.d, .b)
    case 0x51: return self.ld_r_r(.d, .c)
    case 0x52: return self.ld_r_r(.d, .d)
    case 0x53: return self.ld_r_r(.d, .e)
    case 0x54: return self.ld_r_r(.d, .h)
    case 0x55: return self.ld_r_r(.d, .l)
    case 0x56: return self.ld_r_pHL(.d)
    case 0x57: return self.ld_r_r(.d, .a)
    case 0x58: return self.ld_r_r(.e, .b)
    case 0x59: return self.ld_r_r(.e, .c)
    case 0x5a: return self.ld_r_r(.e, .d)
    case 0x5b: return self.ld_r_r(.e, .e)
    case 0x5c: return self.ld_r_r(.e, .h)
    case 0x5d: return self.ld_r_r(.e, .l)
    case 0x5e: return self.ld_r_pHL(.e)
    case 0x5f: return self.ld_r_r(.e, .a)
    case 0x60: return self.ld_r_r(.h, .b)
    case 0x61: return self.ld_r_r(.h, .c)
    case 0x62: return self.ld_r_r(.h, .d)
    case 0x63: return self.ld_r_r(.h, .e)
    case 0x64: return self.ld_r_r(.h, .h)
    case 0x65: return self.ld_r_r(.h, .l)
    case 0x66: return self.ld_r_pHL(.h)
    case 0x67: return self.ld_r_r(.h, .a)
    case 0x68: return self.ld_r_r(.l, .b)
    case 0x69: return self.ld_r_r(.l, .c)
    case 0x6a: return self.ld_r_r(.l, .d)
    case 0x6b: return self.ld_r_r(.l, .e)
    case 0x6c: return self.ld_r_r(.l, .h)
    case 0x6d: return self.ld_r_r(.l, .l)
    case 0x6e: return self.ld_r_pHL(.l)
    case 0x6f: return self.ld_r_r(.l, .a)
    case 0x70: return self.ld_pHL_r(.b)
    case 0x71: return self.ld_pHL_r(.c)
    case 0x72: return self.ld_pHL_r(.d)
    case 0x73: return self.ld_pHL_r(.e)
    case 0x74: return self.ld_pHL_r(.h)
    case 0x75: return self.ld_pHL_r(.l)
    case 0x76: return self.halt()
    case 0x77: return self.ld_pHL_r(.a)
    case 0x78: return self.ld_r_r(.a, .b)
    case 0x79: return self.ld_r_r(.a, .c)
    case 0x7a: return self.ld_r_r(.a, .d)
    case 0x7b: return self.ld_r_r(.a, .e)
    case 0x7c: return self.ld_r_r(.a, .h)
    case 0x7d: return self.ld_r_r(.a, .l)
    case 0x7e: return self.ld_r_pHL(.a)
    case 0x7f: return self.ld_r_r(.a, .a)
    case 0x80: return self.add_a_r(.b)
    case 0x81: return self.add_a_r(.c)
    case 0x82: return self.add_a_r(.d)
    case 0x83: return self.add_a_r(.e)
    case 0x84: return self.add_a_r(.h)
    case 0x85: return self.add_a_r(.l)
    case 0x86: return self.add_a_pHL()
    case 0x87: return self.add_a_r(.a)
    case 0x88: return self.adc_a_r(.b)
    case 0x89: return self.adc_a_r(.c)
    case 0x8a: return self.adc_a_r(.d)
    case 0x8b: return self.adc_a_r(.e)
    case 0x8c: return self.adc_a_r(.h)
    case 0x8d: return self.adc_a_r(.l)
    case 0x8e: return self.adc_a_pHL()
    case 0x8f: return self.adc_a_r(.a)
    case 0x90: return self.sub_a_r(.b)
    case 0x91: return self.sub_a_r(.c)
    case 0x92: return self.sub_a_r(.d)
    case 0x93: return self.sub_a_r(.e)
    case 0x94: return self.sub_a_r(.h)
    case 0x95: return self.sub_a_r(.l)
    case 0x96: return self.sub_a_pHL()
    case 0x97: return self.sub_a_r(.a)
    case 0x98: return self.sbc_a_r(.b)
    case 0x99: return self.sbc_a_r(.c)
    case 0x9a: return self.sbc_a_r(.d)
    case 0x9b: return self.sbc_a_r(.e)
    case 0x9c: return self.sbc_a_r(.h)
    case 0x9d: return self.sbc_a_r(.l)
    case 0x9e: return self.sbc_a_pHL()
    case 0x9f: return self.sbc_a_r(.a)
    case 0xa0: return self.and_a_r(.b)
    case 0xa1: return self.and_a_r(.c)
    case 0xa2: return self.and_a_r(.d)
    case 0xa3: return self.and_a_r(.e)
    case 0xa4: return self.and_a_r(.h)
    case 0xa5: return self.and_a_r(.l)
    case 0xa6: return self.and_a_pHL()
    case 0xa7: return self.and_a_r(.a)
    case 0xa8: return self.xor_a_r(.b)
    case 0xa9: return self.xor_a_r(.c)
    case 0xaa: return self.xor_a_r(.d)
    case 0xab: return self.xor_a_r(.e)
    case 0xac: return self.xor_a_r(.h)
    case 0xad: return self.xor_a_r(.l)
    case 0xae: return self.xor_a_pHL()
    case 0xaf: return self.xor_a_r(.a)
    case 0xb0: return self.or_a_r(.b)
    case 0xb1: return self.or_a_r(.c)
    case 0xb2: return self.or_a_r(.d)
    case 0xb3: return self.or_a_r(.e)
    case 0xb4: return self.or_a_r(.h)
    case 0xb5: return self.or_a_r(.l)
    case 0xb6: return self.or_a_pHL()
    case 0xb7: return self.or_a_r(.a)
    case 0xb8: return self.cp_a_r(.b)
    case 0xb9: return self.cp_a_r(.c)
    case 0xba: return self.cp_a_r(.d)
    case 0xbb: return self.cp_a_r(.e)
    case 0xbc: return self.cp_a_r(.h)
    case 0xbd: return self.cp_a_r(.l)
    case 0xbe: return self.cp_a_pHL()
    case 0xbf: return self.cp_a_r(.a)
    case 0xc0: return self.ret_cc(.nz)
    case 0xc1: return self.pop(.bc)
    case 0xc2: return self.jp_cc_nn(.nz, self.next16)
    case 0xc3: return self.jp_nn(self.next16)
    case 0xc4: return self.call_cc_a16(.nz, self.next16)
    case 0xc5: return self.push(.bc)
    case 0xc6: return self.add_a_d8(self.next8)
    case 0xc7: return self.rst(0x00)
    case 0xc8: return self.ret_cc(.z)
    case 0xc9: return self.ret()
    case 0xca: return self.jp_cc_nn(.z, self.next16)
    case 0xcb: return self.executePrefixed(self.next8)
    case 0xcc: return self.call_cc_a16(.z, self.next16)
    case 0xcd: return self.call_a16(self.next16)
    case 0xce: return self.adc_a_d8(self.next8)
    case 0xcf: return self.rst(0x08)
    case 0xd0: return self.ret_cc(.nc)
    case 0xd1: return self.pop(.de)
    case 0xd2: return self.jp_cc_nn(.nc, self.next16)
    case 0xd4: return self.call_cc_a16(.nc, self.next16)
    case 0xd5: return self.push(.de)
    case 0xd6: return self.sub_a_d8(self.next8)
    case 0xd7: return self.rst(0x10)
    case 0xd8: return self.ret_cc(.c)
    case 0xd9: return self.reti()
    case 0xda: return self.jp_cc_nn(.c, self.next16)
    case 0xdc: return self.call_cc_a16(.c, self.next16)
    case 0xde: return self.sbc_a_d8(self.next8)
    case 0xdf: return self.rst(0x18)
    case 0xe0: return self.ld_pA8_a(self.next8)
    case 0xe1: return self.pop(.hl)
    case 0xe2: return self.ld_ffC_a()
    case 0xe5: return self.push(.hl)
    case 0xe6: return self.and_a_d8(self.next8)
    case 0xe7: return self.rst(0x20)
    case 0xe8: return self.add_sp_r8(self.next8)
    case 0xe9: return self.jp_pHL()
    case 0xea: return self.ld_pA16_a(self.next16)
    case 0xee: return self.xor_a_d8(self.next8)
    case 0xef: return self.rst(0x28)
    case 0xf0: return self.ld_a_pA8(self.next8)
    case 0xf1: return self.pop(.af)
    case 0xf2: return self.ld_a_ffC()
    case 0xf3: return self.di()
    case 0xf5: return self.push(.af)
    case 0xf6: return self.or_a_d8(self.next8)
    case 0xf7: return self.rst(0x30)
    case 0xf8: return self.ldhl_sp_plus_e(self.next8)
    case 0xf9: return self.ld_sp_hl()
    case 0xfa: return self.ld_a_pA16(self.next16)
    case 0xfb: return self.ei()
    case 0xfe: return self.cp_a_d8(self.next8)
    case 0xff: return self.rst(0x38)
    default: fatalError("Tried to execute non existing opcode: \(opcode.hex).")
    }
  }
}
