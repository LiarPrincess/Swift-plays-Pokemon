// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// This file was auto-generated.
// DO NOT EDIT!

// swiftlint:disable file_length
// swiftlint:disable function_body_length
// swiftlint:disable cyclomatic_complexity

extension Cpu {
  internal func executeUnprefixed(_ opcode: UInt8) {
    switch opcode {
    case 0x0: self.nop()
    case 0x1: self.ld_rr_d16(.bc, self.next16)
    case 0x2: self.ld_pBC_a()
    case 0x3: self.inc_rr(.bc)
    case 0x4: self.inc_r(.b)
    case 0x5: self.dec_r(.b)
    case 0x6: self.ld_r_d8(.b, self.next8)
    case 0x7: self.rlca()
    case 0x8: self.ld_pA16_sp(self.next16)
    case 0x9: self.add_hl_r(.bc)
    case 0xa: self.ld_a_pBC()
    case 0xb: self.dec_rr(.bc)
    case 0xc: self.inc_r(.c)
    case 0xd: self.dec_r(.c)
    case 0xe: self.ld_r_d8(.c, self.next8)
    case 0xf: self.rrca()
    case 0x10: self.stop()
    case 0x11: self.ld_rr_d16(.de, self.next16)
    case 0x12: self.ld_pDE_a()
    case 0x13: self.inc_rr(.de)
    case 0x14: self.inc_r(.d)
    case 0x15: self.dec_r(.d)
    case 0x16: self.ld_r_d8(.d, self.next8)
    case 0x17: self.rla()
    case 0x18: self.jr_e(self.next8)
    case 0x19: self.add_hl_r(.de)
    case 0x1a: self.ld_a_pDE()
    case 0x1b: self.dec_rr(.de)
    case 0x1c: self.inc_r(.e)
    case 0x1d: self.dec_r(.e)
    case 0x1e: self.ld_r_d8(.e, self.next8)
    case 0x1f: self.rra()
    case 0x20: self.jr_cc_e(.nz, self.next8)
    case 0x21: self.ld_rr_d16(.hl, self.next16)
    case 0x22: self.ld_pHLI_a()
    case 0x23: self.inc_rr(.hl)
    case 0x24: self.inc_r(.h)
    case 0x25: self.dec_r(.h)
    case 0x26: self.ld_r_d8(.h, self.next8)
    case 0x27: self.daa()
    case 0x28: self.jr_cc_e(.z, self.next8)
    case 0x29: self.add_hl_r(.hl)
    case 0x2a: self.ld_a_pHLI()
    case 0x2b: self.dec_rr(.hl)
    case 0x2c: self.inc_r(.l)
    case 0x2d: self.dec_r(.l)
    case 0x2e: self.ld_r_d8(.l, self.next8)
    case 0x2f: self.cpl()
    case 0x30: self.jr_cc_e(.nc, self.next8)
    case 0x31: self.ld_sp_d16(self.next16)
    case 0x32: self.ld_pHLD_a()
    case 0x33: self.inc_sp()
    case 0x34: self.inc_pHL()
    case 0x35: self.dec_pHL()
    case 0x36: self.ld_pHL_d8(self.next8)
    case 0x37: self.scf()
    case 0x38: self.jr_cc_e(.c, self.next8)
    case 0x39: self.add_hl_sp()
    case 0x3a: self.ld_a_pHLD()
    case 0x3b: self.dec_sp()
    case 0x3c: self.inc_r(.a)
    case 0x3d: self.dec_r(.a)
    case 0x3e: self.ld_r_d8(.a, self.next8)
    case 0x3f: self.ccf()
    case 0x40: self.ld_r_r(.b, .b)
    case 0x41: self.ld_r_r(.b, .c)
    case 0x42: self.ld_r_r(.b, .d)
    case 0x43: self.ld_r_r(.b, .e)
    case 0x44: self.ld_r_r(.b, .h)
    case 0x45: self.ld_r_r(.b, .l)
    case 0x46: self.ld_r_pHL(.b)
    case 0x47: self.ld_r_r(.b, .a)
    case 0x48: self.ld_r_r(.c, .b)
    case 0x49: self.ld_r_r(.c, .c)
    case 0x4a: self.ld_r_r(.c, .d)
    case 0x4b: self.ld_r_r(.c, .e)
    case 0x4c: self.ld_r_r(.c, .h)
    case 0x4d: self.ld_r_r(.c, .l)
    case 0x4e: self.ld_r_pHL(.c)
    case 0x4f: self.ld_r_r(.c, .a)
    case 0x50: self.ld_r_r(.d, .b)
    case 0x51: self.ld_r_r(.d, .c)
    case 0x52: self.ld_r_r(.d, .d)
    case 0x53: self.ld_r_r(.d, .e)
    case 0x54: self.ld_r_r(.d, .h)
    case 0x55: self.ld_r_r(.d, .l)
    case 0x56: self.ld_r_pHL(.d)
    case 0x57: self.ld_r_r(.d, .a)
    case 0x58: self.ld_r_r(.e, .b)
    case 0x59: self.ld_r_r(.e, .c)
    case 0x5a: self.ld_r_r(.e, .d)
    case 0x5b: self.ld_r_r(.e, .e)
    case 0x5c: self.ld_r_r(.e, .h)
    case 0x5d: self.ld_r_r(.e, .l)
    case 0x5e: self.ld_r_pHL(.e)
    case 0x5f: self.ld_r_r(.e, .a)
    case 0x60: self.ld_r_r(.h, .b)
    case 0x61: self.ld_r_r(.h, .c)
    case 0x62: self.ld_r_r(.h, .d)
    case 0x63: self.ld_r_r(.h, .e)
    case 0x64: self.ld_r_r(.h, .h)
    case 0x65: self.ld_r_r(.h, .l)
    case 0x66: self.ld_r_pHL(.h)
    case 0x67: self.ld_r_r(.h, .a)
    case 0x68: self.ld_r_r(.l, .b)
    case 0x69: self.ld_r_r(.l, .c)
    case 0x6a: self.ld_r_r(.l, .d)
    case 0x6b: self.ld_r_r(.l, .e)
    case 0x6c: self.ld_r_r(.l, .h)
    case 0x6d: self.ld_r_r(.l, .l)
    case 0x6e: self.ld_r_pHL(.l)
    case 0x6f: self.ld_r_r(.l, .a)
    case 0x70: self.ld_pHL_r(.b)
    case 0x71: self.ld_pHL_r(.c)
    case 0x72: self.ld_pHL_r(.d)
    case 0x73: self.ld_pHL_r(.e)
    case 0x74: self.ld_pHL_r(.h)
    case 0x75: self.ld_pHL_r(.l)
    case 0x76: self.halt()
    case 0x77: self.ld_pHL_r(.a)
    case 0x78: self.ld_r_r(.a, .b)
    case 0x79: self.ld_r_r(.a, .c)
    case 0x7a: self.ld_r_r(.a, .d)
    case 0x7b: self.ld_r_r(.a, .e)
    case 0x7c: self.ld_r_r(.a, .h)
    case 0x7d: self.ld_r_r(.a, .l)
    case 0x7e: self.ld_r_pHL(.a)
    case 0x7f: self.ld_r_r(.a, .a)
    case 0x80: self.add_a_r(.b)
    case 0x81: self.add_a_r(.c)
    case 0x82: self.add_a_r(.d)
    case 0x83: self.add_a_r(.e)
    case 0x84: self.add_a_r(.h)
    case 0x85: self.add_a_r(.l)
    case 0x86: self.add_a_pHL()
    case 0x87: self.add_a_r(.a)
    case 0x88: self.adc_a_r(.b)
    case 0x89: self.adc_a_r(.c)
    case 0x8a: self.adc_a_r(.d)
    case 0x8b: self.adc_a_r(.e)
    case 0x8c: self.adc_a_r(.h)
    case 0x8d: self.adc_a_r(.l)
    case 0x8e: self.adc_a_pHL()
    case 0x8f: self.adc_a_r(.a)
    case 0x90: self.sub_a_r(.b)
    case 0x91: self.sub_a_r(.c)
    case 0x92: self.sub_a_r(.d)
    case 0x93: self.sub_a_r(.e)
    case 0x94: self.sub_a_r(.h)
    case 0x95: self.sub_a_r(.l)
    case 0x96: self.sub_a_pHL()
    case 0x97: self.sub_a_r(.a)
    case 0x98: self.sbc_a_r(.b)
    case 0x99: self.sbc_a_r(.c)
    case 0x9a: self.sbc_a_r(.d)
    case 0x9b: self.sbc_a_r(.e)
    case 0x9c: self.sbc_a_r(.h)
    case 0x9d: self.sbc_a_r(.l)
    case 0x9e: self.sbc_a_pHL()
    case 0x9f: self.sbc_a_r(.a)
    case 0xa0: self.and_a_r(.b)
    case 0xa1: self.and_a_r(.c)
    case 0xa2: self.and_a_r(.d)
    case 0xa3: self.and_a_r(.e)
    case 0xa4: self.and_a_r(.h)
    case 0xa5: self.and_a_r(.l)
    case 0xa6: self.and_a_pHL()
    case 0xa7: self.and_a_r(.a)
    case 0xa8: self.xor_a_r(.b)
    case 0xa9: self.xor_a_r(.c)
    case 0xaa: self.xor_a_r(.d)
    case 0xab: self.xor_a_r(.e)
    case 0xac: self.xor_a_r(.h)
    case 0xad: self.xor_a_r(.l)
    case 0xae: self.xor_a_pHL()
    case 0xaf: self.xor_a_r(.a)
    case 0xb0: self.or_a_r(.b)
    case 0xb1: self.or_a_r(.c)
    case 0xb2: self.or_a_r(.d)
    case 0xb3: self.or_a_r(.e)
    case 0xb4: self.or_a_r(.h)
    case 0xb5: self.or_a_r(.l)
    case 0xb6: self.or_a_pHL()
    case 0xb7: self.or_a_r(.a)
    case 0xb8: self.cp_a_r(.b)
    case 0xb9: self.cp_a_r(.c)
    case 0xba: self.cp_a_r(.d)
    case 0xbb: self.cp_a_r(.e)
    case 0xbc: self.cp_a_r(.h)
    case 0xbd: self.cp_a_r(.l)
    case 0xbe: self.cp_a_pHL()
    case 0xbf: self.cp_a_r(.a)
    case 0xc0: self.ret_cc(.nz)
    case 0xc1: self.pop(.bc)
    case 0xc2: self.jp_cc_nn(.nz, self.next16)
    case 0xc3: self.jp_nn(self.next16)
    case 0xc4: self.call_cc_a16(.nz, self.next16)
    case 0xc5: self.push(.bc)
    case 0xc6: self.add_a_d8(self.next8)
    case 0xc7: self.rst(0x00)
    case 0xc8: self.ret_cc(.z)
    case 0xc9: self.ret()
    case 0xca: self.jp_cc_nn(.z, self.next16)
    case 0xcb: self.executePrefixed(self.next8)
    case 0xcc: self.call_cc_a16(.z, self.next16)
    case 0xcd: self.call_a16(self.next16)
    case 0xce: self.adc_a_d8(self.next8)
    case 0xcf: self.rst(0x08)
    case 0xd0: self.ret_cc(.nc)
    case 0xd1: self.pop(.de)
    case 0xd2: self.jp_cc_nn(.nc, self.next16)
    case 0xd4: self.call_cc_a16(.nc, self.next16)
    case 0xd5: self.push(.de)
    case 0xd6: self.sub_a_d8(self.next8)
    case 0xd7: self.rst(0x10)
    case 0xd8: self.ret_cc(.c)
    case 0xd9: self.reti()
    case 0xda: self.jp_cc_nn(.c, self.next16)
    case 0xdc: self.call_cc_a16(.c, self.next16)
    case 0xde: self.sbc_a_d8(self.next8)
    case 0xdf: self.rst(0x18)
    case 0xe0: self.ld_pA8_a(self.next8)
    case 0xe1: self.pop(.hl)
    case 0xe2: self.ld_ffC_a()
    case 0xe5: self.push(.hl)
    case 0xe6: self.and_a_d8(self.next8)
    case 0xe7: self.rst(0x20)
    case 0xe8: self.add_sp_r8(self.next8)
    case 0xe9: self.jp_pHL()
    case 0xea: self.ld_pA16_a(self.next16)
    case 0xee: self.xor_a_d8(self.next8)
    case 0xef: self.rst(0x28)
    case 0xf0: self.ld_a_pA8(self.next8)
    case 0xf1: self.pop(.af)
    case 0xf2: self.ld_a_ffC()
    case 0xf3: self.di()
    case 0xf5: self.push(.af)
    case 0xf6: self.or_a_d8(self.next8)
    case 0xf7: self.rst(0x30)
    case 0xf8: self.ld_hl_sp_plus_e(self.next8)
    case 0xf9: self.ld_sp_hl()
    case 0xfa: self.ld_a_pA16(self.next16)
    case 0xfb: self.ei()
    case 0xfe: self.cp_a_d8(self.next8)
    case 0xff: self.rst(0x38)
    default: fatalError("Tried to execute non existing opcode: \(opcode).")
    }
  }
}
