// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// This file was auto-generated.
// DO NOT EDIT!

// swiftlint:disable file_length
// swiftlint:disable function_body_length
// swiftlint:disable cyclomatic_complexity

extension Cpu {
  internal func executePrefixed(_ opcode: UInt8) {
    switch opcode {
    case 0x0: self.rlc_r(.b)
    case 0x1: self.rlc_r(.c)
    case 0x2: self.rlc_r(.d)
    case 0x3: self.rlc_r(.e)
    case 0x4: self.rlc_r(.h)
    case 0x5: self.rlc_r(.l)
    case 0x6: self.rlc_pHL()
    case 0x7: self.rlc_r(.a)
    case 0x8: self.rrc_r(.b)
    case 0x9: self.rrc_r(.c)
    case 0xa: self.rrc_r(.d)
    case 0xb: self.rrc_r(.e)
    case 0xc: self.rrc_r(.h)
    case 0xd: self.rrc_r(.l)
    case 0xe: self.rrc_pHL()
    case 0xf: self.rrc_r(.a)
    case 0x10: self.rl_r(.b)
    case 0x11: self.rl_r(.c)
    case 0x12: self.rl_r(.d)
    case 0x13: self.rl_r(.e)
    case 0x14: self.rl_r(.h)
    case 0x15: self.rl_r(.l)
    case 0x16: self.rl_pHL()
    case 0x17: self.rl_r(.a)
    case 0x18: self.rr_r(.b)
    case 0x19: self.rr_r(.c)
    case 0x1a: self.rr_r(.d)
    case 0x1b: self.rr_r(.e)
    case 0x1c: self.rr_r(.h)
    case 0x1d: self.rr_r(.l)
    case 0x1e: self.rr_pHL()
    case 0x1f: self.rr_r(.a)
    case 0x20: self.sla_r(.b)
    case 0x21: self.sla_r(.c)
    case 0x22: self.sla_r(.d)
    case 0x23: self.sla_r(.e)
    case 0x24: self.sla_r(.h)
    case 0x25: self.sla_r(.l)
    case 0x26: self.sla_pHL()
    case 0x27: self.sla_r(.a)
    case 0x28: self.sra_r(.b)
    case 0x29: self.sra_r(.c)
    case 0x2a: self.sra_r(.d)
    case 0x2b: self.sra_r(.e)
    case 0x2c: self.sra_r(.h)
    case 0x2d: self.sra_r(.l)
    case 0x2e: self.sra_pHL()
    case 0x2f: self.sra_r(.a)
    case 0x30: self.swap_r(.b)
    case 0x31: self.swap_r(.c)
    case 0x32: self.swap_r(.d)
    case 0x33: self.swap_r(.e)
    case 0x34: self.swap_r(.h)
    case 0x35: self.swap_r(.l)
    case 0x36: self.swap_pHL()
    case 0x37: self.swap_r(.a)
    case 0x38: self.srl_r(.b)
    case 0x39: self.srl_r(.c)
    case 0x3a: self.srl_r(.d)
    case 0x3b: self.srl_r(.e)
    case 0x3c: self.srl_r(.h)
    case 0x3d: self.srl_r(.l)
    case 0x3e: self.srl_pHL()
    case 0x3f: self.srl_r(.a)
    case 0x40: self.bit_r(0, .b)
    case 0x41: self.bit_r(0, .c)
    case 0x42: self.bit_r(0, .d)
    case 0x43: self.bit_r(0, .e)
    case 0x44: self.bit_r(0, .h)
    case 0x45: self.bit_r(0, .l)
    case 0x46: self.bit_pHL(0)
    case 0x47: self.bit_r(0, .a)
    case 0x48: self.bit_r(1, .b)
    case 0x49: self.bit_r(1, .c)
    case 0x4a: self.bit_r(1, .d)
    case 0x4b: self.bit_r(1, .e)
    case 0x4c: self.bit_r(1, .h)
    case 0x4d: self.bit_r(1, .l)
    case 0x4e: self.bit_pHL(1)
    case 0x4f: self.bit_r(1, .a)
    case 0x50: self.bit_r(2, .b)
    case 0x51: self.bit_r(2, .c)
    case 0x52: self.bit_r(2, .d)
    case 0x53: self.bit_r(2, .e)
    case 0x54: self.bit_r(2, .h)
    case 0x55: self.bit_r(2, .l)
    case 0x56: self.bit_pHL(2)
    case 0x57: self.bit_r(2, .a)
    case 0x58: self.bit_r(3, .b)
    case 0x59: self.bit_r(3, .c)
    case 0x5a: self.bit_r(3, .d)
    case 0x5b: self.bit_r(3, .e)
    case 0x5c: self.bit_r(3, .h)
    case 0x5d: self.bit_r(3, .l)
    case 0x5e: self.bit_pHL(3)
    case 0x5f: self.bit_r(3, .a)
    case 0x60: self.bit_r(4, .b)
    case 0x61: self.bit_r(4, .c)
    case 0x62: self.bit_r(4, .d)
    case 0x63: self.bit_r(4, .e)
    case 0x64: self.bit_r(4, .h)
    case 0x65: self.bit_r(4, .l)
    case 0x66: self.bit_pHL(4)
    case 0x67: self.bit_r(4, .a)
    case 0x68: self.bit_r(5, .b)
    case 0x69: self.bit_r(5, .c)
    case 0x6a: self.bit_r(5, .d)
    case 0x6b: self.bit_r(5, .e)
    case 0x6c: self.bit_r(5, .h)
    case 0x6d: self.bit_r(5, .l)
    case 0x6e: self.bit_pHL(5)
    case 0x6f: self.bit_r(5, .a)
    case 0x70: self.bit_r(6, .b)
    case 0x71: self.bit_r(6, .c)
    case 0x72: self.bit_r(6, .d)
    case 0x73: self.bit_r(6, .e)
    case 0x74: self.bit_r(6, .h)
    case 0x75: self.bit_r(6, .l)
    case 0x76: self.bit_pHL(6)
    case 0x77: self.bit_r(6, .a)
    case 0x78: self.bit_r(7, .b)
    case 0x79: self.bit_r(7, .c)
    case 0x7a: self.bit_r(7, .d)
    case 0x7b: self.bit_r(7, .e)
    case 0x7c: self.bit_r(7, .h)
    case 0x7d: self.bit_r(7, .l)
    case 0x7e: self.bit_pHL(7)
    case 0x7f: self.bit_r(7, .a)
    case 0x80: self.res_r(0, .b)
    case 0x81: self.res_r(0, .c)
    case 0x82: self.res_r(0, .d)
    case 0x83: self.res_r(0, .e)
    case 0x84: self.res_r(0, .h)
    case 0x85: self.res_r(0, .l)
    case 0x86: self.res_pHL(0)
    case 0x87: self.res_r(0, .a)
    case 0x88: self.res_r(1, .b)
    case 0x89: self.res_r(1, .c)
    case 0x8a: self.res_r(1, .d)
    case 0x8b: self.res_r(1, .e)
    case 0x8c: self.res_r(1, .h)
    case 0x8d: self.res_r(1, .l)
    case 0x8e: self.res_pHL(1)
    case 0x8f: self.res_r(1, .a)
    case 0x90: self.res_r(2, .b)
    case 0x91: self.res_r(2, .c)
    case 0x92: self.res_r(2, .d)
    case 0x93: self.res_r(2, .e)
    case 0x94: self.res_r(2, .h)
    case 0x95: self.res_r(2, .l)
    case 0x96: self.res_pHL(2)
    case 0x97: self.res_r(2, .a)
    case 0x98: self.res_r(3, .b)
    case 0x99: self.res_r(3, .c)
    case 0x9a: self.res_r(3, .d)
    case 0x9b: self.res_r(3, .e)
    case 0x9c: self.res_r(3, .h)
    case 0x9d: self.res_r(3, .l)
    case 0x9e: self.res_pHL(3)
    case 0x9f: self.res_r(3, .a)
    case 0xa0: self.res_r(4, .b)
    case 0xa1: self.res_r(4, .c)
    case 0xa2: self.res_r(4, .d)
    case 0xa3: self.res_r(4, .e)
    case 0xa4: self.res_r(4, .h)
    case 0xa5: self.res_r(4, .l)
    case 0xa6: self.res_pHL(4)
    case 0xa7: self.res_r(4, .a)
    case 0xa8: self.res_r(5, .b)
    case 0xa9: self.res_r(5, .c)
    case 0xaa: self.res_r(5, .d)
    case 0xab: self.res_r(5, .e)
    case 0xac: self.res_r(5, .h)
    case 0xad: self.res_r(5, .l)
    case 0xae: self.res_pHL(5)
    case 0xaf: self.res_r(5, .a)
    case 0xb0: self.res_r(6, .b)
    case 0xb1: self.res_r(6, .c)
    case 0xb2: self.res_r(6, .d)
    case 0xb3: self.res_r(6, .e)
    case 0xb4: self.res_r(6, .h)
    case 0xb5: self.res_r(6, .l)
    case 0xb6: self.res_pHL(6)
    case 0xb7: self.res_r(6, .a)
    case 0xb8: self.res_r(7, .b)
    case 0xb9: self.res_r(7, .c)
    case 0xba: self.res_r(7, .d)
    case 0xbb: self.res_r(7, .e)
    case 0xbc: self.res_r(7, .h)
    case 0xbd: self.res_r(7, .l)
    case 0xbe: self.res_pHL(7)
    case 0xbf: self.res_r(7, .a)
    case 0xc0: self.set_r(0, .b)
    case 0xc1: self.set_r(0, .c)
    case 0xc2: self.set_r(0, .d)
    case 0xc3: self.set_r(0, .e)
    case 0xc4: self.set_r(0, .h)
    case 0xc5: self.set_r(0, .l)
    case 0xc6: self.set_pHL(0)
    case 0xc7: self.set_r(0, .a)
    case 0xc8: self.set_r(1, .b)
    case 0xc9: self.set_r(1, .c)
    case 0xca: self.set_r(1, .d)
    case 0xcb: self.set_r(1, .e)
    case 0xcc: self.set_r(1, .h)
    case 0xcd: self.set_r(1, .l)
    case 0xce: self.set_pHL(1)
    case 0xcf: self.set_r(1, .a)
    case 0xd0: self.set_r(2, .b)
    case 0xd1: self.set_r(2, .c)
    case 0xd2: self.set_r(2, .d)
    case 0xd3: self.set_r(2, .e)
    case 0xd4: self.set_r(2, .h)
    case 0xd5: self.set_r(2, .l)
    case 0xd6: self.set_pHL(2)
    case 0xd7: self.set_r(2, .a)
    case 0xd8: self.set_r(3, .b)
    case 0xd9: self.set_r(3, .c)
    case 0xda: self.set_r(3, .d)
    case 0xdb: self.set_r(3, .e)
    case 0xdc: self.set_r(3, .h)
    case 0xdd: self.set_r(3, .l)
    case 0xde: self.set_pHL(3)
    case 0xdf: self.set_r(3, .a)
    case 0xe0: self.set_r(4, .b)
    case 0xe1: self.set_r(4, .c)
    case 0xe2: self.set_r(4, .d)
    case 0xe3: self.set_r(4, .e)
    case 0xe4: self.set_r(4, .h)
    case 0xe5: self.set_r(4, .l)
    case 0xe6: self.set_pHL(4)
    case 0xe7: self.set_r(4, .a)
    case 0xe8: self.set_r(5, .b)
    case 0xe9: self.set_r(5, .c)
    case 0xea: self.set_r(5, .d)
    case 0xeb: self.set_r(5, .e)
    case 0xec: self.set_r(5, .h)
    case 0xed: self.set_r(5, .l)
    case 0xee: self.set_pHL(5)
    case 0xef: self.set_r(5, .a)
    case 0xf0: self.set_r(6, .b)
    case 0xf1: self.set_r(6, .c)
    case 0xf2: self.set_r(6, .d)
    case 0xf3: self.set_r(6, .e)
    case 0xf4: self.set_r(6, .h)
    case 0xf5: self.set_r(6, .l)
    case 0xf6: self.set_pHL(6)
    case 0xf7: self.set_r(6, .a)
    case 0xf8: self.set_r(7, .b)
    case 0xf9: self.set_r(7, .c)
    case 0xfa: self.set_r(7, .d)
    case 0xfb: self.set_r(7, .e)
    case 0xfc: self.set_r(7, .h)
    case 0xfd: self.set_r(7, .l)
    case 0xfe: self.set_pHL(7)
    case 0xff: self.set_r(7, .a)
    default: fatalError("Tried to execute non existing opcode: \(opcode).")
    }
  }
}
