// This file was auto-generated.
// DO NOT EDIT!

// swiftlint:disable superfluous_disable_command
// swiftlint:disable trailing_comma
// swiftlint:disable file_length

enum OpcodeType {
  case nop
  case ld
  case inc
  case dec
  case rlca
  case add
  case rrca
  case stop
  case rla
  case jr
  case rra
  case daa
  case cpl
  case scf
  case ccf
  case halt
  case adc
  case sub
  case sbc
  case and
  case xor
  case or
  case cp
  case ret
  case pop
  case jp
  case call
  case push
  case rst
  case prefix
  case reti
  case ldh
  case di
  case ei
}

let opcodes: [Opcode] = [
  Opcode("0x0", "nop",       .nop,    nil,     nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x1", "ld",        .ld,     "BC",    "d16",    length: 3, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0x2", "ld",        .ld,     "(BC)",  "A",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x3", "inc",       .inc,    "BC",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4", "inc",       .inc,    "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0x5", "dec",       .dec,    "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0x6", "ld",        .ld,     "B",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7", "rlca",      .rlca,   nil,     nil,      length: 1, cycles: [4],        flags: ["0", "0", "0", "C"]),
  Opcode("0x8", "ld",        .ld,     "(a16)", "SP",     length: 3, cycles: [20],       flags: ["-", "-", "-", "-"]),
  Opcode("0x9", "add",       .add,    "HL",    "BC",     length: 1, cycles: [8],        flags: ["-", "0", "H", "C"]),
  Opcode("0xa", "ld",        .ld,     "A",     "(BC)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0xb", "dec",       .dec,    "BC",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0xc", "inc",       .inc,    "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0xd", "dec",       .dec,    "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0xe", "ld",        .ld,     "C",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0xf", "rrca",      .rrca,   nil,     nil,      length: 1, cycles: [4],        flags: ["0", "0", "0", "C"]),
  Opcode("0x10", "stop",     .stop,   "0",     nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x11", "ld",       .ld,     "DE",    "d16",    length: 3, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0x12", "ld",       .ld,     "(DE)",  "A",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x13", "inc",      .inc,    "DE",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x14", "inc",      .inc,    "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0x15", "dec",      .dec,    "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0x16", "ld",       .ld,     "D",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x17", "rla",      .rla,    nil,     nil,      length: 1, cycles: [4],        flags: ["0", "0", "0", "C"]),
  Opcode("0x18", "jr",       .jr,     "r8",    nil,      length: 2, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0x19", "add",      .add,    "HL",    "DE",     length: 1, cycles: [8],        flags: ["-", "0", "H", "C"]),
  Opcode("0x1a", "ld",       .ld,     "A",     "(DE)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x1b", "dec",      .dec,    "DE",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x1c", "inc",      .inc,    "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0x1d", "dec",      .dec,    "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0x1e", "ld",       .ld,     "E",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x1f", "rra",      .rra,    nil,     nil,      length: 1, cycles: [4],        flags: ["0", "0", "0", "C"]),
  Opcode("0x20", "jr",       .jr,     "NZ",    "r8",     length: 2, cycles: [12, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0x21", "ld",       .ld,     "HL",    "d16",    length: 3, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0x22", "ld",       .ld,     "(HL+)", "A",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x23", "inc",      .inc,    "HL",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x24", "inc",      .inc,    "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0x25", "dec",      .dec,    "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0x26", "ld",       .ld,     "H",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x27", "daa",      .daa,    nil,     nil,      length: 1, cycles: [4],        flags: ["Z", "-", "0", "C"]),
  Opcode("0x28", "jr",       .jr,     "Z",     "r8",     length: 2, cycles: [12, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0x29", "add",      .add,    "HL",    "HL",     length: 1, cycles: [8],        flags: ["-", "0", "H", "C"]),
  Opcode("0x2a", "ld",       .ld,     "A",     "(HL+)",  length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x2b", "dec",      .dec,    "HL",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x2c", "inc",      .inc,    "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0x2d", "dec",      .dec,    "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0x2e", "ld",       .ld,     "L",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x2f", "cpl",      .cpl,    nil,     nil,      length: 1, cycles: [4],        flags: ["-", "1", "1", "-"]),
  Opcode("0x30", "jr",       .jr,     "NC",    "r8",     length: 2, cycles: [12, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0x31", "ld",       .ld,     "SP",    "d16",    length: 3, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0x32", "ld",       .ld,     "(HL-)", "A",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x33", "inc",      .inc,    "SP",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x34", "inc",      .inc,    "(HL)",  nil,      length: 1, cycles: [12],       flags: ["Z", "0", "H", "-"]),
  Opcode("0x35", "dec",      .dec,    "(HL)",  nil,      length: 1, cycles: [12],       flags: ["Z", "1", "H", "-"]),
  Opcode("0x36", "ld",       .ld,     "(HL)",  "d8",     length: 2, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0x37", "scf",      .scf,    nil,     nil,      length: 1, cycles: [4],        flags: ["-", "0", "0", "1"]),
  Opcode("0x38", "jr",       .jr,     "C",     "r8",     length: 2, cycles: [12, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0x39", "add",      .add,    "HL",    "SP",     length: 1, cycles: [8],        flags: ["-", "0", "H", "C"]),
  Opcode("0x3a", "ld",       .ld,     "A",     "(HL-)",  length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x3b", "dec",      .dec,    "SP",    nil,      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x3c", "inc",      .inc,    "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "H", "-"]),
  Opcode("0x3d", "dec",      .dec,    "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "-"]),
  Opcode("0x3e", "ld",       .ld,     "A",     "d8",     length: 2, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x3f", "ccf",      .ccf,    nil,     nil,      length: 1, cycles: [4],        flags: ["-", "0", "0", "C"]),
  Opcode("0x40", "ld",       .ld,     "B",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x41", "ld",       .ld,     "B",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x42", "ld",       .ld,     "B",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x43", "ld",       .ld,     "B",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x44", "ld",       .ld,     "B",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x45", "ld",       .ld,     "B",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x46", "ld",       .ld,     "B",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x47", "ld",       .ld,     "B",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x48", "ld",       .ld,     "C",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x49", "ld",       .ld,     "C",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4a", "ld",       .ld,     "C",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4b", "ld",       .ld,     "C",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4c", "ld",       .ld,     "C",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4d", "ld",       .ld,     "C",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4e", "ld",       .ld,     "C",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x4f", "ld",       .ld,     "C",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x50", "ld",       .ld,     "D",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x51", "ld",       .ld,     "D",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x52", "ld",       .ld,     "D",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x53", "ld",       .ld,     "D",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x54", "ld",       .ld,     "D",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x55", "ld",       .ld,     "D",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x56", "ld",       .ld,     "D",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x57", "ld",       .ld,     "D",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x58", "ld",       .ld,     "E",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x59", "ld",       .ld,     "E",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x5a", "ld",       .ld,     "E",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x5b", "ld",       .ld,     "E",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x5c", "ld",       .ld,     "E",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x5d", "ld",       .ld,     "E",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x5e", "ld",       .ld,     "E",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x5f", "ld",       .ld,     "E",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x60", "ld",       .ld,     "H",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x61", "ld",       .ld,     "H",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x62", "ld",       .ld,     "H",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x63", "ld",       .ld,     "H",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x64", "ld",       .ld,     "H",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x65", "ld",       .ld,     "H",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x66", "ld",       .ld,     "H",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x67", "ld",       .ld,     "H",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x68", "ld",       .ld,     "L",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x69", "ld",       .ld,     "L",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x6a", "ld",       .ld,     "L",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x6b", "ld",       .ld,     "L",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x6c", "ld",       .ld,     "L",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x6d", "ld",       .ld,     "L",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x6e", "ld",       .ld,     "L",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x6f", "ld",       .ld,     "L",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x70", "ld",       .ld,     "(HL)",  "B",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x71", "ld",       .ld,     "(HL)",  "C",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x72", "ld",       .ld,     "(HL)",  "D",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x73", "ld",       .ld,     "(HL)",  "E",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x74", "ld",       .ld,     "(HL)",  "H",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x75", "ld",       .ld,     "(HL)",  "L",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x76", "halt",     .halt,   nil,     nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x77", "ld",       .ld,     "(HL)",  "A",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x78", "ld",       .ld,     "A",     "B",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x79", "ld",       .ld,     "A",     "C",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7a", "ld",       .ld,     "A",     "D",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7b", "ld",       .ld,     "A",     "E",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7c", "ld",       .ld,     "A",     "H",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7d", "ld",       .ld,     "A",     "L",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7e", "ld",       .ld,     "A",     "(HL)",   length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0x7f", "ld",       .ld,     "A",     "A",      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0x80", "add",      .add,    "A",     "B",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x81", "add",      .add,    "A",     "C",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x82", "add",      .add,    "A",     "D",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x83", "add",      .add,    "A",     "E",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x84", "add",      .add,    "A",     "H",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x85", "add",      .add,    "A",     "L",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x86", "add",      .add,    "A",     "(HL)",   length: 1, cycles: [8],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x87", "add",      .add,    "A",     "A",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x88", "adc",      .adc,    "A",     "B",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x89", "adc",      .adc,    "A",     "C",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x8a", "adc",      .adc,    "A",     "D",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x8b", "adc",      .adc,    "A",     "E",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x8c", "adc",      .adc,    "A",     "H",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x8d", "adc",      .adc,    "A",     "L",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x8e", "adc",      .adc,    "A",     "(HL)",   length: 1, cycles: [8],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x8f", "adc",      .adc,    "A",     "A",      length: 1, cycles: [4],        flags: ["Z", "0", "H", "C"]),
  Opcode("0x90", "sub",      .sub,    "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x91", "sub",      .sub,    "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x92", "sub",      .sub,    "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x93", "sub",      .sub,    "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x94", "sub",      .sub,    "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x95", "sub",      .sub,    "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x96", "sub",      .sub,    "(HL)",  nil,      length: 1, cycles: [8],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x97", "sub",      .sub,    "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x98", "sbc",      .sbc,    "A",     "B",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x99", "sbc",      .sbc,    "A",     "C",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x9a", "sbc",      .sbc,    "A",     "D",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x9b", "sbc",      .sbc,    "A",     "E",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x9c", "sbc",      .sbc,    "A",     "H",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x9d", "sbc",      .sbc,    "A",     "L",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x9e", "sbc",      .sbc,    "A",     "(HL)",   length: 1, cycles: [8],        flags: ["Z", "1", "H", "C"]),
  Opcode("0x9f", "sbc",      .sbc,    "A",     "A",      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xa0", "and",      .and,    "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa1", "and",      .and,    "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa2", "and",      .and,    "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa3", "and",      .and,    "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa4", "and",      .and,    "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa5", "and",      .and,    "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa6", "and",      .and,    "(HL)",  nil,      length: 1, cycles: [8],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa7", "and",      .and,    "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xa8", "xor",      .xor,    "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xa9", "xor",      .xor,    "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xaa", "xor",      .xor,    "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xab", "xor",      .xor,    "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xac", "xor",      .xor,    "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xad", "xor",      .xor,    "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xae", "xor",      .xor,    "(HL)",  nil,      length: 1, cycles: [8],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xaf", "xor",      .xor,    "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb0", "or",       .or,     "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb1", "or",       .or,     "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb2", "or",       .or,     "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb3", "or",       .or,     "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb4", "or",       .or,     "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb5", "or",       .or,     "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb6", "or",       .or,     "(HL)",  nil,      length: 1, cycles: [8],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb7", "or",       .or,     "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xb8", "cp",       .cp,     "B",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xb9", "cp",       .cp,     "C",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xba", "cp",       .cp,     "D",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xbb", "cp",       .cp,     "E",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xbc", "cp",       .cp,     "H",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xbd", "cp",       .cp,     "L",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xbe", "cp",       .cp,     "(HL)",  nil,      length: 1, cycles: [8],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xbf", "cp",       .cp,     "A",     nil,      length: 1, cycles: [4],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xc0", "ret",      .ret,    "NZ",    nil,      length: 1, cycles: [20, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0xc1", "pop",      .pop,    "BC",    nil,      length: 1, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0xc2", "jp",       .jp,     "NZ",    "a16",    length: 3, cycles: [16, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xc3", "jp",       .jp,     "a16",   nil,      length: 3, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xc4", "call",     .call,   "NZ",    "a16",    length: 3, cycles: [24, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xc5", "push",     .push,   "BC",    nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xc6", "add",      .add,    "A",     "d8",     length: 2, cycles: [8],        flags: ["Z", "0", "H", "C"]),
  Opcode("0xc7", "rst",      .rst,    "00H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xc8", "ret",      .ret,    "Z",     nil,      length: 1, cycles: [20, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0xc9", "ret",      .ret,    nil,     nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xca", "jp",       .jp,     "Z",     "a16",    length: 3, cycles: [16, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xcb", "prefix",   .prefix, "CB",    nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0xcc", "call",     .call,   "Z",     "a16",    length: 3, cycles: [24, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xcd", "call",     .call,   "a16",   nil,      length: 3, cycles: [24],       flags: ["-", "-", "-", "-"]),
  Opcode("0xce", "adc",      .adc,    "A",     "d8",     length: 2, cycles: [8],        flags: ["Z", "0", "H", "C"]),
  Opcode("0xcf", "rst",      .rst,    "08H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xd0", "ret",      .ret,    "NC",    nil,      length: 1, cycles: [20, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0xd1", "pop",      .pop,    "DE",    nil,      length: 1, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0xd2", "jp",       .jp,     "NC",    "a16",    length: 3, cycles: [16, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xd4", "call",     .call,   "NC",    "a16",    length: 3, cycles: [24, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xd5", "push",     .push,   "DE",    nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xd6", "sub",      .sub,    "d8",    nil,      length: 2, cycles: [8],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xd7", "rst",      .rst,    "10H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xd8", "ret",      .ret,    "C",     nil,      length: 1, cycles: [20, 8],    flags: ["-", "-", "-", "-"]),
  Opcode("0xd9", "reti",     .reti,   nil,     nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xda", "jp",       .jp,     "C",     "a16",    length: 3, cycles: [16, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xdc", "call",     .call,   "C",     "a16",    length: 3, cycles: [24, 12],   flags: ["-", "-", "-", "-"]),
  Opcode("0xde", "sbc",      .sbc,    "A",     "d8",     length: 2, cycles: [8],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xdf", "rst",      .rst,    "18H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xe0", "ldh",      .ldh,    "(a8)",  "A",      length: 2, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0xe1", "pop",      .pop,    "HL",    nil,      length: 1, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0xe2", "ld",       .ld,     "(C)",   "A",      length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0xe5", "push",     .push,   "HL",    nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xe6", "and",      .and,    "d8",    nil,      length: 2, cycles: [8],        flags: ["Z", "0", "1", "0"]),
  Opcode("0xe7", "rst",      .rst,    "20H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xe8", "add",      .add,    "SP",    "r8",     length: 2, cycles: [16],       flags: ["0", "0", "H", "C"]),
  Opcode("0xe9", "jp",       .jp,     "(HL)",  nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0xea", "ld",       .ld,     "(a16)", "A",      length: 3, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xee", "xor",      .xor,    "d8",    nil,      length: 2, cycles: [8],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xef", "rst",      .rst,    "28H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xf0", "ldh",      .ldh,    "A",     "(a8)",   length: 2, cycles: [12],       flags: ["-", "-", "-", "-"]),
  Opcode("0xf1", "pop",      .pop,    "AF",    nil,      length: 1, cycles: [12],       flags: ["Z", "N", "H", "C"]),
  Opcode("0xf2", "ld",       .ld,     "A",     "(C)",    length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0xf3", "di",       .di,     nil,     nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0xf5", "push",     .push,   "AF",    nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xf6", "or",       .or,     "d8",    nil,      length: 2, cycles: [8],        flags: ["Z", "0", "0", "0"]),
  Opcode("0xf7", "rst",      .rst,    "30H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xf8", "ld",       .ld,     "HL",    "SP+r8",  length: 2, cycles: [12],       flags: ["0", "0", "H", "C"]),
  Opcode("0xf9", "ld",       .ld,     "SP",    "HL",     length: 1, cycles: [8],        flags: ["-", "-", "-", "-"]),
  Opcode("0xfa", "ld",       .ld,     "A",     "(a16)",  length: 3, cycles: [16],       flags: ["-", "-", "-", "-"]),
  Opcode("0xfb", "ei",       .ei,     nil,     nil,      length: 1, cycles: [4],        flags: ["-", "-", "-", "-"]),
  Opcode("0xfe", "cp",       .cp,     "d8",    nil,      length: 2, cycles: [8],        flags: ["Z", "1", "H", "C"]),
  Opcode("0xff", "rst",      .rst,    "38H",   nil,      length: 1, cycles: [16],       flags: ["-", "-", "-", "-"]),
]
