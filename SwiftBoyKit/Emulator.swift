// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
// If a copy of the MPL was not distributed with this file,
// You can obtain one at http://mozilla.org/MPL/2.0/.

// TODO: Access control + final
// TODO: State after boot should be the same as (bottom): http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html
public class Emulator {

  public let cpu: Cpu
  public let ppu: Ppu
  public let bus: Bus

  public init() {
    self.bus = Bus()
    self.cpu = Cpu(bus: self.bus)
    self.ppu = Ppu(memory: self.bus)

    // in debug we support only 1 emulator (the last one created)
    Debug.emulator = self
  }

  public func run(maxCycles: UInt16? = nil, lastPC: UInt16? = nil) {
    Debug.emulatorWillStart()

    let maxCycles = maxCycles ?? UInt16.max
    let lastPC  = lastPC ?? UInt16.max

    var brakepoint = false
    while self.cpu.cycle <= maxCycles && self.cpu.pc != lastPC {
      // ------------
      brakepoint = brakepoint || self.cpu.pc == 0x0039
      if brakepoint { // conditional brakepoint in lldb slows down code (by a lot)
        _ = 5
      }
      // ------------

      let cycles = self.cpu.tick()
      self.bus.updateTimers(cycles: cycles)
      self.ppu.update(cycles: cycles)
      self.cpu.processInterrupts()
    }

//    print("Finished:")
//    print("  cycle: cpu: \(self.cpu.cycle.hex) max: \(maxCycles.hex) -> \(self.cpu.cycle > maxCycles)")
//    print("  pc:    cpu: \(self.cpu.pc.hex) max: \(lastPC.hex) -> \(self.cpu.pc == lastPC)")
//
//    self.ppu.dump()
  }

  public func fakeEmptyCartridge() {
    let bootromStart = 0x0000
    let bootromEnd = bootromStart + bootrom.count
    self.bus.rom0.data.replaceSubrange(bootromStart..<bootromEnd, with: bootrom)

    let logoStart = 0x0104
    let logoEnd = logoStart + nintendoLogo.count
    self.bus.rom0.data.replaceSubrange(logoStart..<logoEnd, with: nintendoLogo)
  }
}

private let bootromStart: UInt16 = 0x00
private let bootromEnd:   UInt16 = 0xff
private let bootromSize:  UInt16 = bootromEnd - bootromStart + 1

private let bootrom: [UInt8] = [
/*          0     1     2     3     4     5     6     7     8     9    a      b     c     d     e     f */
/* 00 */ 0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb, 0x21, 0x26, 0xff, 0x0e,
/* 10 */ 0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3, 0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0,
/* 20 */ 0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
/* 30 */ 0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22, 0x23, 0x05, 0x20, 0xf9,
/* 40 */ 0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99, 0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20,
/* 50 */ 0xf9, 0x2e, 0x0f, 0x18, 0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
/* 60 */ 0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20, 0xf7, 0x1d, 0x20, 0xf2,
/* 70 */ 0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62, 0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06,
/* 80 */ 0x7b, 0xe2, 0x0c, 0x3e, 0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
/* 90 */ 0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17, 0xc1, 0xcb, 0x11, 0x17,
/* a0 */ 0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9, 0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b,
/* b0 */ 0x03, 0x73, 0x00, 0x83, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e,
/* c0 */ 0xdc, 0xcc, 0x6e, 0xe6, 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc,
/* d0 */ 0xdd, 0xdc, 0x99, 0x9f, 0xbb, 0xb9, 0x33, 0x3e, 0x3c, 0x42, 0xb9, 0xa5, 0xb9, 0xa5, 0x42, 0x3c,
/* e0 */ 0x21, 0x04, 0x01, 0x11, 0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x20,
/* f0 */ 0xf5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x20, 0xfe, 0x3e, 0x01, 0xe0, 0x50
]

// swiftlint:disable collection_alignment
private let nintendoLogo: [UInt8] = [
/*           0     1     2     3     4     5     6     7     8     9    a      b     c     d     e     f */
/* 100 */                         0xce, 0xed, 0x66, 0x66, 0xcc, 0x0d, 0x00, 0x0b, 0x03, 0x73, 0x00, 0x83,
/* 110 */ 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x08, 0x11, 0x1f, 0x88, 0x89, 0x00, 0x0e, 0xdc, 0xcc, 0x6e, 0xe6,
/* 120 */ 0xdd, 0xdd, 0xd9, 0x99, 0xbb, 0xbb, 0x67, 0x63, 0x6e, 0x0e, 0xec, 0xcc, 0xdd, 0xdc, 0x99, 0x9f,
/* 130 */ 0xbb, 0xb9, 0x33, 0x3e
]
